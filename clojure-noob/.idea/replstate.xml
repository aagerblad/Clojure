<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1462386606633">{:repl-history {:ide [], :local [&quot;(+ 1 2 3 4 5\n   )&quot; &quot;(-main)&quot; &quot;(+ 1 23 4 )&quot; &quot;(+ 1 2 3 4 5)&quot; &quot;(better-symmetrize-body-parts asym-hobbit-body-parts)&quot; &quot;(add100 1)&quot; &quot;(def dec-maker 9)&quot; &quot;(dec-maker)&quot; &quot;(def dec9 (dec-maker 9))&quot; &quot;(add100 10)&quot; &quot;(fn [h &amp; r]\n  (if (empty? r)\n    h\n    fn (r)))&quot; &quot;(fn [h &amp; r]\n  ((if (empty? r)\n    h\n    recur r)))&quot; &quot;(fn [h &amp; r]\n  ((if (empty? r)\n    h\n    (recur r))))&quot; &quot;(fn foo [h &amp; r]\n  ((if (empty? r)\n    h\n    (foo r))))&quot; &quot;(defn foo [h &amp; r]\n  ((if (empty? r)\n    h\n    (foo r))))&quot; &quot;(foo [1 2 3 4])&quot; &quot;(defn foo [[h &amp; r]]\n  ((if (empty? r)\n    h\n    (foo r))))&quot; &quot;(defn foo [[h &amp; r]]\n  ((if (empty? r)\n    h\n    (foo r)))) (foo [1 2 3 4])&quot; &quot;(bar [1 2 3 4 5])&quot; &quot;(bar)&quot; &quot;(testtest 12)&quot; &quot;(testtest [1 2 3 4 4])&quot; &quot;testtest [1 2]&quot; &quot;(testtest [1])&quot; &quot;(if (nil? (1 2 3)))&quot; &quot;(nil? (1 2 3))&quot; &quot;(empty? (1 2 3))&quot; &quot;(let [a &amp; b] (1 2 3 4)\n             b)&quot; &quot;(let [a &amp; b] (1 2 3 4)) (b)&quot; &quot;(testtest [1 2])&quot; &quot;(testtest [1 2 3 4 5 6])&quot; &quot;(woo)&quot; &quot;(woo [1 2 3])&quot; &quot;((woo) [1 2 3])&quot; &quot;((woo2) [1 2 3])&quot; &quot;(#(%) 1)&quot; &quot;((#(%)) 1)&quot; &quot;((woo4) [1])&quot; &quot;((woo4) 1)&quot; &quot;((woo4) 1 2)&quot; &quot;((woo3) [1 2 3 4 5 6] 6)&quot; &quot;((woo3) [1 2 3 4 5 6] 3)&quot; &quot;((woo3) [1 2 3 4 5 6] 2)&quot; &quot;((woo3) [1 2 3 4 5 6] 0)&quot; &quot;((woo3) [1 2 3 4 5 6] 1)&quot; &quot;((woo3) '(1 2 3 4 5 6) 1)&quot; &quot;((woo3) '(1 2 3 4 5 6) 2)&quot; &quot;((woo3) '(4 5 6 7) 2)&quot; &quot;((woo3) [:a :b :c] 0)&quot; &quot;(c [1 2 3 4 5] 0)&quot; &quot;(c [1 2 3 4 5] 1)&quot; &quot;(ci [1 2 3 4 12 2 3 4])&quot; &quot;(reduce (fn [c r] (conj c r)) [] [1 2 3 4 5])&quot; &quot;(reduce (fn [c r] (conj r c)) [] [1 2 3 4 5])&quot; &quot;(reduce (fn [c r] (concat r c)) [] [1 2 3 4 5])&quot; &quot;(reduce (fn [c r] (print r)) [] [1 2 3 4 5])&quot; &quot;(reduce (fn [c r] (into r c)) [] [1 2 3 4 5])&quot; &quot;(reduce (fn [c r] (into [r] c)) [] [1 2 3 4 5])&quot; &quot;(reduce (fn [c r] (cons r c)) [] [1 2 3 4 5])&quot; &quot;(reduce #(if(odd? %2) (cons %2 %1)) [] #{1 2 3 4 5})&quot; &quot;(reduce #(if(odd? %2) (into [%2] %1)) [] #{1 2 3 4 5})&quot; &quot;(reduce #(if(odd? %2) (into [%2] %1)) [] [1 2 3 4 5])&quot; &quot;(odd? 3)&quot; &quot;(reduce #(if(odd? %2) (print %2) [] [1 2 3 4 5])&quot; &quot;(reduce #(if(odd? %2) (print %2)) [] [1 2 3 4 5])&quot; &quot;(reduce #(if (true) (cons %2 %1)) [] [1 2 3 4 5])&quot; &quot;(reduce #(if (1) (cons %2 %1)) [] [1 2 3 4 5])&quot; &quot;(reduce #(if (1) (cons %2 %1) (1)) [] [1 2 3 4 5])&quot; &quot;(reduce #(if \n          (1) \n          (cons %2 %1) \n          (1)\n          ) [] [1 2 3 4 5])&quot; &quot;(reduce #(if (true) \n          (cons %2 %1)\n          ) [] [1 2 3 4 5])&quot; &quot;(reduce (cons %2 %1) [] [1 2 3 4 5])&quot; &quot;(reduce #(cons %2 %1) [] [1 2 3 4 5])&quot; &quot;(if (odd? %2))&quot; &quot;(#(if (true)\n   (cons %2 %1)\n   ) [] 1)&quot; &quot;(if (odd? 3)\n  (cons 3 []))&quot; &quot;(if (odd? 3)\n  (cons 3 [1 3 3]))&quot; &quot;(#(if (odd? %)\n   (cons % [1 3 3])) 3)&quot; &quot;(#(if (odd? %)\n   (cons % [1 3 3])) 2)&quot; &quot;(#(if (odd? %)\n   (cons % [1 3 3])) 1)&quot; &quot;(reduce #(if(odd? %2) (cons %2 %1)) [] [1 2 3 4 5])&quot; &quot;(reduce #(if(odd? %2) (cons %2 %1) %1) [] [1 2 3 4 5])&quot; &quot;(reduce #(if(odd? %2)(cons %2 %1) %1) [] [1 2 3 4 5])&quot; &quot;(reduce #(if(odd? %2)(conj %2 %1) %1) [] [1 2 3 4 5])&quot; &quot;(reduce #(if(odd? %2)(cons %1 %2) %1) [] [1 2 3 4 5])&quot; &quot;(reduce #(if(odd? %2)(conj %1 %2) %1) [] [1 2 3 4 5])&quot; &quot;(filter odd? [1 2 3 4 5 56])&quot; &quot;(#(if (&gt; 1 %2)\n   %1\n   (recur %1 (dec %2))) [1 1] 3)&quot; &quot;(#(if (&gt; 1 %2)\n   %1\n   (recur (conj 1 %1)\n          (dec %2))) [1 1] 3)&quot; &quot;(#(if (&gt; 1 %2)\n   %1\n   (recur (cons 1 %1)\n          (dec %2))) [1 1] 3)&quot; &quot;(#(if (&gt; 1 %2)\n   %1\n   (recur (conj %1 (+ (last %1) (last (drop-last %1))))\n          (dec %2))) [1 1] 3)&quot; &quot;(#(if (&gt; 3 %2)\n   %1\n   (recur (conj %1 (+ (last %1) (last (drop-last %1))))\n          (dec %2))) [1 1] 3)&quot; &quot;(#(if (&gt; 3 %2)\n   %1\n   (recur (conj %1 (+ (last %1) (last (drop-last %1))))\n          (dec %2))) [1 1] 7)&quot; &quot;(#(if (&gt; 3 %2)\n   %1\n   (recur (conj %1 (+ (last %1) (last (drop-last %1))))\n          (dec %2))) [1 1] 10)&quot; &quot;(dec-maker 10)&quot; &quot;(dec-maker 10 10)&quot; &quot;((dec-maker 10) 10)&quot; &quot;((dec-maker 10) 30)&quot;], :remote []}}</component>
</project>